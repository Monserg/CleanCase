//
//  SignInShowInteractor.swift
//  CleanCase
//
//  Created by msm72 on 02.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol SignInShowBusinessLogic {
    func saveSelectedCity(byRow row: Int)
    func saveSelectedPhoneCode(byRow row: Int)
    func addClient(withRequestModel requestModel: SignInShowModels.User.RequestModel)
    func fetchCities(withRequestModel requestModel: SignInShowModels.City.RequestModel)
    func fetchLaundry(withRequestModel requestModel: SignInShowModels.Laundry.RequestModel)
    func fetchDeliveryDates(withRequestModel requestModel: SignInShowModels.Date.RequestModel)
    func fetchCollectionDates(withRequestModel requestModel: SignInShowModels.Date.RequestModel)
    func fetchDepartments(withRequestModel requestModel: SignInShowModels.Department.RequestModel)
}

protocol SignInShowDataStore {
    var cities: [PickerViewSupport]! { get set }
    var codes: [PickerViewSupport]! { get set }
    var laundryID: String! { get set }
    var selectedCityID: String? { get set }
    var selectedPhoneCode: String? { get set }
    var textFieldsTexts: [ (placeholder: String, errorText: String) ] { get set }
}

class SignInShowInteractor: ShareInteractor, SignInShowBusinessLogic, SignInShowDataStore {
    // MARK: - Properties
    var presenter: SignInShowPresentationLogic?
    
    let operatorCode = [ "050", "052", "053", "054", "055" ]

    // SignInShowDataStore protocol implementation
    var laundryID: String! = "0"
    var selectedCityID: String?
    var selectedPhoneCode: String?
    var codes: [PickerViewSupport]! = [PickerViewSupport]()
    var cities: [PickerViewSupport]! = [PickerViewSupport]()

    var textFieldsTexts: [ (placeholder: String, errorText: String) ] = [
        (placeholder: "Select City".localized(), errorText: "Please, select city...".localized()),
        (placeholder: "Code".localized(), errorText: "Please, select code...".localized()),
        (placeholder: "Enter Phone Number".localized(), errorText: "Please, enter phone number...".localized()),
        (placeholder: "Enter First Name".localized(), errorText: "Please, enter first name...".localized()),
        (placeholder: "Enter Last Name".localized(), errorText: "Please, enter last name...".localized()),
        (placeholder: "Enter Address".localized(), errorText: "Please, enter address...".localized()),
        (placeholder: "Enter Email".localized(), errorText: "Please, enter email...".localized())
    ]
    
    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .Severe)
    }
    

    // MARK: - Business logic implementation
    fileprivate func loadLastRecordID() {
        // API
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .getLastRecordID(nil, false), andResponseType: ResponseAPIRecordIDResult.self, completionHandler: { [unowned self] responseAPI in
            if let result = responseAPI.model as? ResponseAPIRecordIDResult {
                Token.current!.lastMessageID = result.GetRecordIdResult
                self.appDependency.coreDataManager.contextSave()
                Logger.log(message: "Last Record ID = \(result.GetRecordIdResult)", event: .Verbose)
            }
        })
    }
    
    func saveSelectedCity(byRow row: Int) {
        self.selectedCityID = "\(cities[row].id)"
    }
    
    func saveSelectedPhoneCode(byRow row: Int) {
        self.selectedPhoneCode = codes[row].title
    }
    
    func addClient(withRequestModel requestModel: SignInShowModels.User.RequestModel) {
        let bodyParams: [String: Any] = [ "client": [
                                                        "ClientId":         0,
                                                        "LaundryId":        Laundry.codeID,
                                                        "FirstName":        requestModel.params.firstName,
                                                        "LastName":         requestModel.params.lastName,
                                                        "MobilePhone":      self.selectedPhoneCode! + requestModel.params.phone,
                                                        "Email":            requestModel.params.email,
                                                        "CityId":           self.selectedCityID!,
                                                        "AddressLine1":     requestModel.params.address,
                                                        "AddressLine2":     "",
                                                        "PostCode":         "",
                                                        "CardNumber":       "",
                                                        "CardCVV":          "",
                                                        "CardExpired":      "",
                                                        "Adv":              "1",
                                                        "Token":            Token.current!.firebase ?? ""
                                                    ]
                                        ]

        // API: Fetch request data
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .addClient(bodyParams, true), andResponseType: ResponseAPIClientResult.self, completionHandler: { [unowned self] responseAPI in
            if let result = responseAPI.model as? ResponseAPIClientResult {
                var personalDataJSON = bodyParams["client"] as! [String: Any]
                personalDataJSON["ClientId"] = Int16(result.AddClientResult)
                
                if let personalData = self.appDependency.coreDataManager.createEntity("PersonalData") as? PersonalData {
                    personalData.updateEntity(fromJSON: personalDataJSON)
                }
            }
            
            self.appDependency.coreDataManager.contextSave()
            self.loadLastRecordID()
            
            let responseModel = SignInShowModels.User.ResponseModel()
            self.presenter?.presentClient(fromResponseModel: responseModel)
        })
    }
    
    func fetchCities(withRequestModel requestModel: SignInShowModels.City.RequestModel) {
        for i in 0...4 {
            codes.append(SignInShowModels.City.ResponseModel.ItemForPickerView(id: Int16(i), title: operatorCode[i]))
        }
        
        // API: Fetch request data
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .getCitiesList(nil, false), andResponseType: ResponseAPICities.self, completionHandler: { [unowned self] responseAPI in
            if let result = responseAPI.model as? ResponseAPICities {
                for model in result.GetCitiesResult {
                    self.appDependency.coreDataManager.updateEntity(withData: EntityUpdateTuple(name:       "City",
                                                                                                predicate:  NSPredicate.init(format: "iD = \(model.ID)"),
                                                                                                model:      model))
                    
                    self.cities.append(SignInShowModels.City.ResponseModel.ItemForPickerView(id: model.ID, title: model.CityName))
                }
            }
            
            self.appDependency.coreDataManager.contextSave()

            let responseModel = SignInShowModels.City.ResponseModel()
            self.presenter?.presentCities(fromResponseModel: responseModel)
        })
    }
    
    func fetchLaundry(withRequestModel requestModel: SignInShowModels.Laundry.RequestModel) {
        // API
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .getLaundryInfo([ "city_id": self.selectedCityID! ], false), andResponseType: ResponseAPILaundryResult.self, completionHandler: { [unowned self] responseAPI in
            if let result = responseAPI.model as? ResponseAPILaundryResult {
                let model = result.GetLaundryByCityResult
                self.laundryID = "\(model.ID)"
                
                self.appDependency.coreDataManager.updateEntity(withData: EntityUpdateTuple(name:       "Laundry",
                                                                                            predicate:  NSPredicate.init(format: "iD == %@", self.laundryID),
                                                                                            model:      model))
            }
            
            self.appDependency.coreDataManager.contextSave()

            let responseModel = SignInShowModels.Laundry.ResponseModel()
            self.presenter?.presentLaundry(fromResponseModel: responseModel)
        })
    }
    
    func fetchDeliveryDates(withRequestModel requestModel: SignInShowModels.Date.RequestModel) {
        // API
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .getDeliveryDatesList([ "laundry_id": self.laundryID ], false), andResponseType: ResponseAPIDeliveryDatesResult.self, completionHandler: { [unowned self] responseAPI in
            if let result = responseAPI.model as? ResponseAPIDeliveryDatesResult {
                for model in result.GetDeliveryDatesResult {
                    if model.Type == 2 {
                        let predicate = NSPredicate.init(format: "fromDate == %@ AND toDate == %@ AND laundryId == \(model.LaundryId) AND type == 2 AND weekDay = \(model.WeekDay)", model.FromDate, model.ToDate, model.LaundryId)
                        
                        self.appDependency.coreDataManager.updateEntity(withData: EntityUpdateTuple(name:       "DeliveryDate",
                                                                                                    predicate:  predicate,
                                                                                                    model:      model))
                    }
                }
            }
            
            self.appDependency.coreDataManager.contextSave()

            let responseModel = SignInShowModels.Date.ResponseModel()
            self.presenter?.presentDeliveryDates(fromResponseModel: responseModel)
        })
    }

    func fetchCollectionDates(withRequestModel requestModel: SignInShowModels.Date.RequestModel) {
        // API
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .getCollectionDatesList([ "laundry_id": self.laundryID ], false), andResponseType: ResponseAPICollectionDatesResult.self, completionHandler: { [unowned self] responseAPI in
            if let result = responseAPI.model as? ResponseAPICollectionDatesResult {
                for model in result.GetCollectionDatesResult {
                    if model.Type == 1 {
                        let predicate = NSPredicate.init(format: "fromDate == %@ AND toDate == %@ AND laundryId == \(model.LaundryId) AND type == 1 AND weekDay = \(model.WeekDay)", model.FromDate, model.ToDate, model.LaundryId)
                        
                        self.appDependency.coreDataManager.updateEntity(withData: EntityUpdateTuple(name:       "CollectionDate",
                                                                                                    predicate:  predicate,
                                                                                                    model:      model))
                    }
                }
            }
            
            self.appDependency.coreDataManager.contextSave()

            let responseModel = SignInShowModels.Date.ResponseModel()
            self.presenter?.presentCollectionDates(fromResponseModel: responseModel)
        })
    }
    
    func fetchDepartments(withRequestModel requestModel: SignInShowModels.Department.RequestModel) {
        // API: Fetch request data
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .getDepartmentsList([ "laundry_id": self.laundryID ], false), andResponseType: ResponseAPIDepartmentsResult.self, completionHandler: { [unowned self] responseAPI in
            if let result = responseAPI.model as? ResponseAPIDepartmentsResult {
                for model in result.GetDepartmentsResult {
                    let predicate = NSPredicate.init(format: "departmentId == \(model.DepartmentId)")
                    
                    self.appDependency.coreDataManager.updateEntity(withData: EntityUpdateTuple(name:       "Department",
                                                                                                predicate:  predicate,
                                                                                                model:      model))
                }
            }
            
            self.appDependency.coreDataManager.contextSave()

            let responseModel = SignInShowModels.Department.ResponseModel()
            self.presenter?.presentDepartments(fromResponseModel: responseModel)
        })
    }
}
