//
//  SignInShowInteractor.swift
//  CleanCase
//
//  Created by msm72 on 02.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol SignInShowBusinessLogic {
    func fetchCities(withRequestModel requestModel: SignInShowModels.City.RequestModel)
    func fetchLaundry(withRequestModel requestModel: SignInShowModels.Laundry.RequestModel)
}

protocol SignInShowDataStore {
     var cities: [City]! { get set }
}

class SignInShowInteractor: ShareInteractor, SignInShowBusinessLogic, SignInShowDataStore {
    // MARK: - Properties
    var presenter: SignInShowPresentationLogic?
    var worker: SignInShowWorker?
    
    let operatorCode = [ "050", "052", "053", "054", "055" ]

    // SignInShowDataStore protocol implementation
    var cities: [City]! = [City]()
    
    
    // MARK: - Business logic implementation
    func fetchCities(withRequestModel requestModel: SignInShowModels.City.RequestModel) {
        worker = SignInShowWorker()
        
        // API: Fetch request data
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .getCitiesList(nil, false), andResponseType: ResponseAPICities.self, completionHandler: { [unowned self] responseAPI in
            if let result = responseAPI.model as? ResponseAPICities {
                for model in result.GetCitiesResult {
                    CoreDataManager.instance.updateEntity(withData: EntityUpdateTuple(name:       "City",
                                                                                      predicate:  NSPredicate.init(format: "iD = \(model.ID)"),
                                                                                      model:      model))
                }
            }
            
            let responseModel = SignInShowModels.City.ResponseModel()
            self.presenter?.presentCities(fromResponseModel: responseModel)
        })
    }
    
    func fetchLaundry(withRequestModel requestModel: SignInShowModels.Laundry.RequestModel) {
        worker = SignInShowWorker()
        
        // API: Fetch request data
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .getLaundryInfo([ "city_id": requestModel.cityID ], false), andResponseType: ResponseAPILaundryResult.self, completionHandler: { [unowned self] responseAPI in
            if let result = responseAPI.model as? ResponseAPILaundryResult {
                let model = result.GetLaundryByCityResult
               
                CoreDataManager.instance.updateEntity(withData: EntityUpdateTuple(name:       "Laundry",
                                                                                  predicate:  NSPredicate.init(format: "iD = \(model.ID)"),
                                                                                  model:      model))
            }
            
            let responseModel = SignInShowModels.Laundry.ResponseModel()
            self.presenter?.presentLaundry(fromResponseModel: responseModel)
        })
    }
}
