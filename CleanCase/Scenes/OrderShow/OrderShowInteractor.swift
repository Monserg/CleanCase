//
//  OrderShowInteractor.swift
//  CleanCase
//
//  Created by msm72 on 02.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol OrderShowBusinessLogic {
    func saveOrderID(_ orderID: Int16)
    func cancelOrder(withRequestModel requestModel: OrderShowModels.Order.RequestModel)
}

protocol OrderShowDataStore {
    var order: Order! { get set }
    var orderID: Int16! { get set }
    var orderItems: [OrderItem]? { get set }
}

class OrderShowInteractor: ShareInteractor, OrderShowBusinessLogic, OrderShowDataStore {
    // MARK: - Properties
    var presenter: OrderShowPresentationLogic?
    
    // OrderShowDataStore protocol implementation
    var order: Order!

    var orderID: Int16! {
        didSet {
            order = self.appDependency.coreDataManager.readEntity(withName: "Order",
                                                                  andPredicateParameters: NSPredicate.init(format: "orderID == \(orderID!)")) as! Order
            
            if let itemsSet = order.items, itemsSet.count > 0 {
                self.orderItems = Array(itemsSet) as? [OrderItem]
            }
        }
    }
    
    var orderItems: [OrderItem]?
    
    
    // MARK: - Business logic implementation
    func saveOrderID(_ orderID: Int16) {
        self.orderID = orderID
    }
    
    func cancelOrder(withRequestModel requestModel: OrderShowModels.Order.RequestModel) {
        // API: Fetch request data
        let bodyParams: [ String: Any ] = [ "orderId": self.orderID, "status": 6 ]
       
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .updateOrderStatus(bodyParams, true), andResponseType: ResponseAPIUpdateStatusResult.self, completionHandler: { [unowned self] responseAPI in
            var error: Error?
            
            if let result = responseAPI.model as? ResponseAPIUpdateStatusResult, result.UpdateStatusResult == "1" {
                self.order.orderStatus = 6
                self.order.save()
            }
            
            else {
                error = NSError.init(domain: "BAD_REQUEST_400", code: 400, userInfo: nil)
                Logger.log(message: "API 'Cancel Order failed: error = \(error!.localizedDescription)'", event: .Error)
            }

            let responseModel = OrderShowModels.Order.ResponseModel(error: error)
            self.presenter?.presentCancelOrder(fromResponseModel: responseModel)
        })
    }
}
