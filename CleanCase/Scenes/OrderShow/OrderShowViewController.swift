//
//  OrderShowViewController.swift
//  CleanCase
//
//  Created by msm72 on 02.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol OrderShowDisplayLogic: class {
    func displayUpdateOrderStatus(fromViewModel viewModel: OrderShowModels.Order.ViewModel)
}

class OrderShowViewController: UIViewController {
    // MARK: - Properties
    var interactor: OrderShowBusinessLogic?
    var router: (NSObjectProtocol & OrderShowRoutingLogic & OrderShowDataPassing)?
    
    var routeFrom: ShowMode = .FromSideMenu
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var cancelButton: UIButton! {
        didSet {
            cancelButton.isHidden = true
            cancelButton.setTitle(cancelButton.titleLabel!.text!.localized(), for: .normal)
        }
    }
    
    @IBOutlet var captionLabelsCollection: [UILabel]! {
        didSet {
            _ = captionLabelsCollection.map({
                $0.textAlignment = .right
                $0.text = $0.text!.localized()
            })
        }
    }
    
    @IBOutlet var valuesLabelsCollection: [UILabel]! {
        didSet {
            _ = valuesLabelsCollection.map({
                $0.textAlignment = .center
            })
        }
    }
    
    @IBOutlet var headerCaptionLabelsCollection: [UILabel]! {
        didSet {
            _ = headerCaptionLabelsCollection.map({
                $0.textAlignment = .center
                $0.text = $0.text!.localized()
            })
        }
    }
    
    @IBOutlet weak var tableView: UITableView! {
        didSet {
            tableView.delegate = self
            tableView.dataSource = self
        }
    }
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   OrderShowInteractor(AppDependency())
        let presenter               =   OrderShowPresenter()
        let router                  =   OrderShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.addBackBarButtonItem()
        self.addBasketBarButtonItem(true)
        self.displayLaundryInfo(withName: Laundry.name, andPhoneNumber: "\(Laundry.phoneNumber ?? "")")

        loadViewSettings()
    }
    
    override func handlerBackButtonTapped(_ sender: UIBarButtonItem) {
        if routeFrom == .FromOrderCreate {
            self.navigationController?.popToRootViewController(animated: true)
            self.showAlertView(withTitle: "Info", andMessage: "Order accepted", needCancel: false, completion: { _ in })
        }
        
        else {
            self.navigationController?.popViewController(animated: true)
        }
    }
    
    
    // MARK: - Custom Functions
    func loadViewSettings() {
        if let order = self.router?.dataStore?.order {
            _ = valuesLabelsCollection.first(where: { $0.tag == 2 }).map({ $0.text = order.createdDate + " " + order.collectionFrom })
            _ = valuesLabelsCollection.first(where: { $0.tag == 3 }).map({ $0.text = OrderStatus(rawValue: order.orderStatus)!.name })
            
            if order.orderStatus == 0 {
                self.cancelButton.isHidden = false
            }
        }
    }
    
    func saveOrderID(_ orderID: Int16) {
        interactor?.saveOrderID(orderID)
    }
    
    // MARK: - Actions
    @IBAction func handlerCancelButtonTapped(_ sender: UIButton) {
        // API
        checkNetworkConnection({ [unowned self] success in
            if success {
                self.showAlertView(withTitle: "Info", andMessage: "Are you sure?".localized(), needCancel: true, completion: { [unowned self] success in
                    if success {
                        let requestModel = OrderShowModels.Order.RequestModel()
                        self.interactor?.updateOrderStatus(withRequestModel: requestModel)
                    }
                })
            }
        })
    }
}


// MARK: - OrderShowDisplayLogic
extension OrderShowViewController: OrderShowDisplayLogic {
    func displayUpdateOrderStatus(fromViewModel viewModel: OrderShowModels.Order.ViewModel) {
        // NOTE: Display the result from the Presenter
        guard viewModel.error == nil else {
            self.showAlertView(withTitle: "Error", andMessage: (viewModel.error! as NSError).domain, needCancel: false, completion: {_ in})
            return
        }
        
        self.showAlertView(withTitle: "Info", andMessage: "Order status updated".localized(), needCancel: false, completion: { _ in
            self.navigationController?.popToRootViewController(animated: true)
        })
    }
}


// MARK: - UITableViewDataSource
extension OrderShowViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let dataSource = self.router?.dataStore?.orderItems else {
            return 0
        }
        
        return dataSource.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cellIdentifier = "OrderItemCell"
        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as! OrderItemTableViewCell
        let orderItem = self.router!.dataStore!.orderItems![indexPath.row]
        
        cell.setup(withItem: orderItem, withOrderStatus: self.router!.dataStore!.order.orderStatus, andIndexPath: indexPath)
        
        return cell
    }
}


// MARK: - UITableViewDelegate
extension OrderShowViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 54.0
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 89.0
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        if let order = self.router?.dataStore?.order {
            // Register the Nib footer section views
            self.tableView.register(UINib(nibName: "OrderItemsTableViewFooterView", bundle: nil), forHeaderFooterViewReuseIdentifier: "FooterCell")
            let footerView = self.tableView.dequeueReusableHeaderFooterView(withIdentifier: "FooterCell") as! OrderItemsTableViewFooterView
            
            footerView.setup(withOrderStatus: order.orderStatus)
            
            return footerView
        }
        
        return nil
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {

    }
}
