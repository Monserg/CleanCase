//
//  OrderCreateInteractor.swift
//  CleanCase
//
//  Created by msm72 on 02.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol OrderCreateBusinessLogic {
    func saveSelectedDate(byRow row: Int)
    func saveSelectedTime(byRow row: Int)
    func fetchDates(withRequestModel requestModel: OrderCreateModels.Dates.RequestModel)
    func doSomething(withRequestModel requestModel: OrderCreateModels.Dates.RequestModel)
}

protocol OrderCreateDataStore {
    var dateEntitiesFiltered: [DeliveryDate]! { get set }
    var dates: [PickerViewSupport]! { get set }
    var times: [PickerViewSupport]! { get set }
    var selectedDateRow: Int { get set }
    var selectedTimeRow: Int { get set }
    var textFieldsTexts: [ (placeholder: String, errorText: String) ] { get set }
}

class OrderCreateInteractor: ShareInteractor, OrderCreateBusinessLogic, OrderCreateDataStore {
    // MARK: - Properties
    var presenter: OrderCreatePresentationLogic?
    
    // OrderCreateDataStore protocol implementation
    var selectedDateRow: Int = 0
    var selectedTimeRow: Int = 0

    var textFieldsTexts: [ (placeholder: String, errorText: String) ] = [
        (placeholder: "Enter Address".localized(), errorText: "Please, enter address...".localized()),
        (placeholder: "Select Collection Date".localized(), errorText: "Please, select collection date...".localized()),
        (placeholder: "Select Collection Time".localized(), errorText: "Please, select collection time...".localized())
    ]

    var dateEntitiesFiltered: [DeliveryDate]!
    var dates: [PickerViewSupport]! = [PickerViewSupport]()
    var times: [PickerViewSupport]!

    
    // MARK: - Business logic implementation
    func saveSelectedDate(byRow row: Int) {
        self.selectedDateRow = row
        self.times = (dates[row] as! OrderCreateModels.Dates.RequestModel.DateForPickerView).times
    }
    
    func saveSelectedTime(byRow row: Int) {
        self.selectedTimeRow = row
    }

    func fetchDates(withRequestModel requestModel: OrderCreateModels.Dates.RequestModel) {
        // CoreData: Fetch data
        for i in 1...7 {
            let date = (i == 1) ? Date() : Date().addingTimeInterval(TimeInterval(i * 24 * 60 * 60))
            let dateComponents = Calendar.current.dateComponents([.year, .month, .day, .weekday, .hour, .minute], from: date)
            
            if dateComponents.weekday! != 7 {
                if let dateEntities = appDependency.coreDataManager.readEntities(withName: "CollectionDate",
                                                                                 withPredicateParameters: NSPredicate.init(format: "weekDay == \(dateComponents.weekday!)"),
                                                                                 andSortDescriptor: nil) as? [CollectionDate] {
                    // Times
                    let dateEntity = dateEntities.first!
                    var dateTimes = [PickerViewSupport]()
                    let weekDate = String.createDateString(fromComponents: dateComponents)
                    
                    // Check times for current date
                    for (index, dateEntity) in dateEntities.enumerated() {
                        if (i == 1 && dateEntity.fromDate.convertToFloat() >= (Float(dateComponents.hour! + 1) + Float(dateComponents.minute!) / 100)) || i != 1 {
                            dateTimes.append(OrderCreateModels.Dates.RequestModel.TimeForPickerView(id:          Int16(index),
                                                                                                    title:       "\(dateEntity.fromDate.getTime())-\(dateEntity.toDate.getTime())",
                                bodyDate:    weekDate,
                                bodyTime:    dateEntity.fromDate.getTime()))
                        }
                    }
                    
                    if dateTimes.count > 0 {
                        self.dates.append(OrderCreateModels.Dates.RequestModel.DateForPickerView(id:      dateEntity.weekDay,
                                                                                                 title:   "\(dateEntity.name!) " + weekDate,
                                                                                                 times:   dateTimes))
                    }
                }
            }
        }
    }
    
    func doSomething(withRequestModel requestModel: OrderCreateModels.Dates.RequestModel) {
        let responseModel = OrderCreateModels.Dates.ResponseModel()
        presenter?.presentSomething(fromResponseModel: responseModel)
    }
}
