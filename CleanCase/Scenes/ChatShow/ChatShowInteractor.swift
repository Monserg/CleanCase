//
//  ChatShowInteractor.swift
//  CleanCase
//
//  Created by msm72 on 08.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol ChatShowBusinessLogic {
    func fetchMessages(withRequestModel requestModel: ChatShowModels.Message.RequestModel)
}

protocol ChatShowDataStore {
    var messages: [ChatShowModels.Message.RequestModel.DisplayedMessage]! { get set }
}


class ChatShowInteractor:ShareInteractor, ChatShowBusinessLogic, ChatShowDataStore {
    // MARK: - Properties
    var presenter: ChatShowPresentationLogic?
    var worker: ChatShowWorker?
    
    // ... protocol implementation
    // OrdersShowDataStore protocol implementation
    var messages: [ChatShowModels.Message.RequestModel.DisplayedMessage]!

    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .Severe)
    }
    
    // MARK: - Business logic implementation
    func fetchMessages(withRequestModel requestModel: ChatShowModels.Message.RequestModel) {
        if let messagesList = self.appDependency.coreDataManager.readEntities(withName: "ChatMessages",
                                                                            withPredicateParameters: nil,
                                                                            andSortDescriptor: NSSortDescriptor.init(key: "created_date", ascending: false)) as? [ChatMessages],
            messagesList.count > 0 {
            self.messages = [ChatShowModels.Message.RequestModel.DisplayedMessage]()
            
            for messageEntity in messagesList {
                self.messages.append(ChatShowModels.Message.RequestModel.DisplayedMessage(createdDate:      messageEntity.created_date,
                                                                                            laundry_id:          messageEntity.laundry_id,                                                                                          text:           messageEntity.text))
            }
        }
        
        let responseModel = ChatShowModels.Message.ResponseModel()
        presenter?.display(fromResponseModel: responseModel)
        
    }
}
