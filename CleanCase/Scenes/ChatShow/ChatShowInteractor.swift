//
//  ChatShowInteractor.swift
//  CleanCase
//
//  Created by msm72 on 08.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol ChatShowBusinessLogic {
    func sendMessage(withRequestModel requestModel: ChatShowModels.Message.RequestModel)
    func loadMessages(withRequestModel requestModel: ChatShowModels.Message.RequestModel)
}

protocol ChatShowDataStore {
    var messages: [Message]! { get set }
}

class ChatShowInteractor: ShareInteractor, ChatShowBusinessLogic, ChatShowDataStore {
    // MARK: - Properties
    var presenter: ChatShowPresentationLogic?
    
    // ChatShowDataStore protocol implementation
    var messages: [Message]!
    
    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .Severe)
    }
    

    // MARK: - Business logic implementation
    func loadMessages(withRequestModel requestModel: ChatShowModels.Message.RequestModel) {
        // CoreData
        if let messagesList = self.appDependency.coreDataManager.readEntities(withName:                 "Message",
                                                                              withPredicateParameters:  nil,
                                                                              andSortDescriptor:        NSSortDescriptor.init(key: "codeID", ascending: false)) as? [Message],
            messagesList.count > 0 {
            self.messages = messagesList
        }
        
        let responseModel = ChatShowModels.Message.ResponseModel()
        presenter?.presentMessages(fromResponseModel: responseModel)
    }
    
    func sendMessage(withRequestModel requestModel: ChatShowModels.Message.RequestModel) {
        // Prepare request body parameters
        let bodyParams: [String: Any] = [ "message": [ "ClientId": PersonalData.current!.clientId, "LaundryId": Laundry.codeID, "Data": requestModel.message ?? "XXX" ] ]
        
        // API: Fetch request data
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .sendMessage(bodyParams, true), andResponseType: ResponseAPILaundryResult.self, completionHandler: { [unowned self] response in
            // CoreData: add new Message
            if response.error == nil {
                let messageEntity = CoreDataManager.instance.createEntity("Message") as! Message
                messageEntity.updateEntity(withType: 0, andText: requestModel.message!)
            }
            
            let responseModel = ChatShowModels.Message.ResponseModel(error: response.error)
            self.presenter?.presentSendMessage(fromResponseModel: responseModel)
        })
    }
}
