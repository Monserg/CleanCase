//
//  DeliveryTermsShowInteractor.swift
//  CleanCase
//
//  Created by msm72 on 08.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol DeliveryTermsShowBusinessLogic {
    func saveSelectedDateRow(_ value: Int)
    func saveSelectedTimeRow(_ value: Int)
    func fetchDates(withRequestModel requestModel: DeliveryTermsShowModels.Dates.RequestModel)
}

protocol DeliveryTermsShowDataStore {
    var dates: [PickerViewSupport]! { get set }
    var times: [PickerViewSupport]! { get set }
    var selectedDateRow: Int { get set }
    var selectedTimeRow: Int { get set }

    var textFieldsTexts: [ (placeholder: String, errorText: String) ] { get set }
}

class DeliveryTermsShowInteractor: ShareInteractor, DeliveryTermsShowBusinessLogic, DeliveryTermsShowDataStore {
    // MARK: - Properties
    var presenter: DeliveryTermsShowPresentationLogic?

    
    // DeliveryTermsShowDataStore protocol implementation
    var selectedDateRow: Int = 0
    var selectedTimeRow: Int = 0
    
    var textFieldsTexts: [ (placeholder: String, errorText: String) ] = [
        (placeholder: "Select Delivery Date".localized(), errorText: "Please, select delivery date...".localized()),
        (placeholder: "Select Delivery Time".localized(), errorText: "Please, select delivery time...".localized())
    ]

    var dates: [PickerViewSupport]! = [PickerViewSupport]()
    var times: [PickerViewSupport]!

    
    // MARK: - Business logic implementation
    func saveSelectedDateRow(_ value: Int) {
        self.selectedDateRow = value
        self.times = [PickerViewSupport]()

        // Fetch Delivery Times
        let selectedWeekDay = (dates[value] as! DeliveryTermsShowModels.Dates.RequestModel.ItemForPickerView).weekDay
        
        let timesFiltered = (dates as! [DeliveryTermsShowModels.Dates.RequestModel.ItemForPickerView]).filter({
            $0.weekDay >= selectedWeekDay
        })
        
        for (index, date) in timesFiltered.enumerated() {
            times.append(DeliveryTermsShowModels.Dates.RequestModel.ItemForPickerView(id:           "\(index)",
                                                                                      title:        "\(date.fromTime.getTime())-\(date.toTime.getTime())",
                                                                                      weekDay:      date.weekDay,
                                                                                      fromTime:     date.fromTime,
                                                                                      toTime:       date.toTime))
        }
    }

    func saveSelectedTimeRow(_ value: Int) {
        self.selectedTimeRow = value
    }

    func fetchDates(withRequestModel requestModel: DeliveryTermsShowModels.Dates.RequestModel) {
        // CoreData: Fetch data
        if let dateEntities = appDependency.coreDataManager.readEntities(withName: "DeliveryDate", andPredicateParameters: nil), dateEntities.count > 0 {
            let dateComponents = Calendar.current.dateComponents([.year, .month, .day, .weekday, .hour, .minute], from: Date())
            
            let dateEntitiesFiltered = (dateEntities as! [DeliveryDate]).filter({
                $0.weekDay > dateComponents.weekday! ||
                ($0.weekDay == dateComponents.weekday! && $0.fromDate.convertToFloat() >= (Float(dateComponents.hour!) + Float(dateComponents.minute!) / 100))
            })
            
//            dateEntitiesFiltered.sort(by: { date1, date2 in
//                return date1.weekDay < date2.weekDay && date1.fromDate < date2.fromDate
//            })
            
            print(dateEntitiesFiltered)
            
            for (index, entity) in dateEntitiesFiltered.enumerated() {
                let weekDate = (entity.weekDay != dateComponents.weekday!) ? ("\(dateComponents.day!)".addZero() + "/" + "\(dateComponents.month!)".addZero() + "/\(dateComponents.year!)") : "ff"
                    
                dates.append(DeliveryTermsShowModels.Dates.RequestModel.ItemForPickerView(id:           "\(index)",
                                                                                          title:        "\(entity.name!) " + weekDate,
                                                                                          weekDay:      entity.weekDay,
                                                                                          fromTime:     entity.fromDate,
                                                                                          toTime:       entity.toDate))
            }
        }
                
        let responseModel = DeliveryTermsShowModels.Dates.ResponseModel()
        presenter?.presentData(fromResponseModel: responseModel)
    }
}
