//
//  DeliveryTermsShowViewController.swift
//  CleanCase
//
//  Created by msm72 on 08.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol DeliveryTermsShowDisplayLogic: class {
    func displayData(fromViewModel viewModel: DeliveryTermsShowModels.Data.ViewModel)
}

class DeliveryTermsShowViewController: UIViewController {
    // MARK: - Properties
    var interactor: DeliveryTermsShowBusinessLogic?
    var router: (NSObjectProtocol & DeliveryTermsShowRoutingLogic & DeliveryTermsShowDataPassing)?
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var titleLabel: UILabel! {
        didSet {
            titleLabel.text = "Delivery Title".localized()
            titleLabel.textAlignment = .right
            titleLabel.numberOfLines = 1
        }
    }
    
    @IBOutlet weak var captionLabel: UILabel! {
        didSet {
            captionLabel.text = "Delivery Caption".localized()
            captionLabel.textAlignment = .center
            captionLabel.numberOfLines = 0
        }
    }
    
    @IBOutlet var textFieldsCollection: [UITextField]! {
        didSet {
            _ = textFieldsCollection.map({
                $0.placeholder = router?.dataStore?.textFieldsTexts[$0.tag].placeholder
                $0.accessibilityValue = router?.dataStore?.textFieldsTexts[$0.tag].errorText
                $0.backgroundColor = .red
                $0.delegate = self
            })
        }
    }
    
    @IBOutlet weak var charactersCountLabel: UILabel! {
        didSet {
            charactersCountLabel.text = "0/100"
        }
    }

    @IBOutlet weak var textView: UITextView! {
        didSet {
            textView.text = "Enter comment".localized()
            textView.layer.borderColor = UIColor.black.cgColor
            textView.layer.borderWidth = 1
            textView.layer.cornerRadius = 4
            textView.delegate = self
        }
    }
    
    @IBOutlet weak var saveButton: UIButton! {
        didSet {
            saveButton.isEnabled = false
        }
    }
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   DeliveryTermsShowInteractor(AppDependency())
        let presenter               =   DeliveryTermsShowPresenter()
        let router                  =   DeliveryTermsShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
     
        loadViewSettings()
    }
    
    
    // MARK: - Custom Functions
    func loadViewSettings() {
        DispatchQueue.main.async(execute: {
            let requestModel = DeliveryTermsShowModels.Data.RequestModel()
            self.interactor?.fetchData(withRequestModel: requestModel)
        })
    }

    fileprivate func startDataValidation() {
        if let textField = textFieldsCollection.first(where: { ($0.text?.isEmpty)! }) {
            self.showAlertView(withTitle: "Info", andMessage: textField.accessibilityValue!, needCancel: false, completion: { _ in })
        }
            
        else {
            self.view.isUserInteractionEnabled = false
            
            DispatchQueue.main.async(execute: {
                let requestModel = DeliveryTermsShowModels.Data.RequestModel()
                self.interactor?.fetchData(withRequestModel: requestModel)
            })
        }
    }
    
    fileprivate func loadTextViewPlaceholder(_ text: String?) {
        if (text == nil) {
            textView.text = ""
//            textView.font = UIFont.ubuntuLight12
            textView.textColor = UIColor.black
        } else if (text == "Enter comment".localized() || text!.isEmpty) {
            textView.text = "Enter comment".localized()
//            textView.font = UIFont.ubuntuLightItalic12
            textView.textColor = UIColor.green
        } else {
//            commentTextView.font = UIFont.ubuntuLight12
            textView.textColor = UIColor.blue
        }
    }

    
    // MARK: - Gestures
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        if let touch = touches.first {
            if (touch.view == self.view) {
                self.dismiss(animated: true, completion: nil)
            }
        }
    }

    @IBAction func hideKeyboard(_ sender: UITapGestureRecognizer) {
        self.textView.resignFirstResponder()
    }
    
    
    // MARK: - Actions
    @IBAction func handlerSaveButtonTapped(_ sender: UIButton) {
        self.startDataValidation()
    }
}


// MARK: - DeliveryTermsShowDisplayLogic
extension DeliveryTermsShowViewController: DeliveryTermsShowDisplayLogic {
    func displayData(fromViewModel viewModel: DeliveryTermsShowModels.Data.ViewModel) {
        // NOTE: Display the result from the Presenter
        
    }
}


// MARK: - UITextFieldDelegate
extension DeliveryTermsShowViewController: UITextFieldDelegate {
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        if textField.tag == 0 {
            textField.showToolBar(withPickerViewDataSource: self.router!.dataStore!.dates, andSelectedItem: router!.dataStore!.selectedDateRow, { [unowned self] date in
                if let selectedDate = date as? PickerViewSupport {
                    textField.text = selectedDate.title
                    self.interactor?.saveSelectedDateRow(Int(selectedDate.id)!)
                }
                
                textField.resignFirstResponder()
            })
        }
            
        else if textField.tag == 1 {
//            let selectedCodeRow = (router?.dataStore?.selectedCodeTitle == nil) ? 0 : router!.dataStore!.codes.index(where: { $0.title == router!.dataStore!.selectedCodeTitle })
//
//            textField.showToolBar(withPickerViewDataSource: self.router!.dataStore!.codes, andSelectedItem: selectedCodeRow!, { [unowned self] code in
//                if let selectedCode = code as? PickerViewSupport {
//                    textField.text = selectedCode.title
//                    self.interactor?.saveSelectedCodeTitle(selectedCode.title)
//                }
//
//                textField.resignFirstResponder()
//            })
        }
        
        return true
    }
    
    // Clear button tap
    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        return true
    }
    
    // Hide keyboard
    func textFieldShouldEndEditing(_ textField: UITextField) -> Bool {
        return true
    }
    
    // TextField editing
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        return true
    }
    
    // Return button tap
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        return true
    }
}


// MARK: - UITextViewDelegate
extension DeliveryTermsShowViewController: UITextViewDelegate {
    func textViewShouldBeginEditing(_ textView: UITextView) -> Bool {
        loadTextViewPlaceholder((textView.text == "Enter comment".localized()) ? nil : textView.text)
        return true
    }
    
    func textViewShouldEndEditing(_ textView: UITextView) -> Bool {
        loadTextViewPlaceholder(textView.text)
        return true
    }
    
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        charactersCountLabel.text = "\(textView.text!.count + text.count)/100"
        
        return (textView.text!.count + text.count) < 100
    }
}
