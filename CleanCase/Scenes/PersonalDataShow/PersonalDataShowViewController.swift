//
//  PersonalDataShowViewController.swift
//  CleanCase
//
//  Created by msm72 on 02.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ADEmailAndPassword

// MARK: - Input & Output protocols
protocol PersonalDataShowDisplayLogic: class {
    func displayTerms(fromViewModel viewModel: PersonalDataShowModels.Client.ViewModel)
    func displayUpdatePersonalData(fromViewModel viewModel: PersonalDataShowModels.Client.ViewModel)
}

enum ShowMode {
    case FromSideMenu
    case FromOrderCreate
}

class PersonalDataShowViewController: UIViewController {
    // MARK: - Properties
    var interactor: PersonalDataShowBusinessLogic?
    var router: (NSObjectProtocol & PersonalDataShowRoutingLogic & PersonalDataShowDataPassing)?
    
    var routeFrom: ShowMode = .FromSideMenu
    var firstResponder: UITextField!
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var scrollView: UIScrollView!
   
    @IBOutlet weak var saveButton: UIButton! {
        didSet {
            saveButton.setTitle("Save".localized(), for: .normal)
        }
    }
    
    @IBOutlet var textFieldsCollection: [UITextField]! {
        didSet {
            _ = textFieldsCollection.map({
                $0.placeholder = router?.dataStore?.textFieldsTexts[$0.tag].placeholder
                $0.accessibilityValue = router?.dataStore?.textFieldsTexts[$0.tag].errorText
                $0.delegate = self
            })
        }
    }
    
    @IBOutlet weak var creditCardLabel: UILabel! {
        didSet {
            creditCardLabel.text = "Credit Card Title".localized()
        }
    }
    
    @IBOutlet weak var creditCardCVVLabel: UILabel! {
        didSet {
            creditCardCVVLabel.text = "Credit Card CVV".localized()
        }
    }
    
    @IBOutlet weak var scrollViewTopConstraint: NSLayoutConstraint! {
        didSet {
//            scrollViewTopConstraint.constant = smallDevices.contains(UIDevice.current.deviceType) ? -64.0 : 0.0
        }
    }
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .Severe)
    }

    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   PersonalDataShowInteractor(AppDependency())
        let presenter               =   PersonalDataShowPresenter()
        let router                  =   PersonalDataShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "OrderShowSegue" {
            let destinationVC           =   segue.destination as! OrderShowViewController
            destinationVC.routeFrom     =   .FromOrderCreate
            destinationVC.saveOrderID(self.router!.dataStore!.orderID)
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.addBackBarButtonItem()
        self.displayLaundryInfo(withName: Laundry.name, andPhoneNumber: "\(Laundry.phoneNumber ?? "")")
        
        self.loadViewSettings()
        
        // Add keyboard Observers
        self.registerForKeyboardNotifications()
    }
    
    override func handlerBackButtonTapped(_ sender: UIBarButtonItem) {
        self.navigationController?.popToRootViewController(animated: true)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        
        Logger.log(message: "Success", event: .Severe)
        NotificationCenter.default.removeObserver(self)
    }

    
    // MARK: - Custom Functions
    func saveOrderID(_ orderID: Int16) {
        interactor?.saveOrderID(orderID)
    }

    private func loadViewSettings() {
        let requestModel = PersonalDataShowModels.Client.RequestModel(params: nil)
        interactor?.fetchTerms(withRequestModel: requestModel)
        
        if let personalDataEntity = PersonalData.current {
            _ = textFieldsCollection.map({
                switch $0.tag {
                case 0:
                    $0.text = personalDataEntity.mobilePhone
                    
                case 1:
                    $0.text = personalDataEntity.firstName
                    
                case 2:
                    $0.text = personalDataEntity.lastName
                    
                case 3:
                    $0.text = personalDataEntity.addressLine1
                    
                case 4:
                    $0.text = personalDataEntity.email
                    
                case 5:
                    $0.text = personalDataEntity.cardNumber
                    
                case 6:
                    $0.text = personalDataEntity.cardCVV
                    
                case 7:
                    if let cardExpired = personalDataEntity.cardExpired {
                        $0.text = String(cardExpired.suffix(2))
                    }
                    
                    else {
                        $0.text = nil
                    }
                    
                case 8:
                    if let cardExpired = personalDataEntity.cardExpired {
                        $0.text = String(cardExpired.prefix(2))
                    }
                    
                    else {
                        $0.text = nil
                    }
                    
                default:
                    break
                }
            })
        }
    }
    
    fileprivate func registerForKeyboardNotifications() {
        NotificationCenter.default.addObserver(self, selector: #selector(adjustForKeyboard), name: Notification.Name.UIKeyboardWillHide, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(adjustForKeyboard), name: Notification.Name.UIKeyboardWillChangeFrame, object: nil)
    }
    
    fileprivate func startDataValidation() {
        if let textField = textFieldsCollection.first(where: { ($0.text?.isEmpty)! }) {
            self.showAlertView(withTitle: "Info", andMessage: textField.accessibilityValue!, needCancel: false, completion: { _ in })
        }

        else if let textField = textFieldsCollection.first(where: { $0.tag == 0 && $0.text!.count < 10 }) {
            self.showAlertView(withTitle: "Info", andMessage: textField.accessibilityValue!, needCancel: false, completion: { _ in })
        }

        else {
            // API
            checkNetworkConnection({ [unowned self] success in
                if success {
                    self.view.isUserInteractionEnabled = false
                    
                    DispatchQueue.main.async(execute: {
                        let requestModel = PersonalDataShowModels.Client.RequestModel(params: [
                                "ClientId":         PersonalData.current!.clientId,
                                "LaundryId":        Laundry.codeID,
                                "FirstName":        self.textFieldsCollection.first(where: { $0.tag == 1 })!.text!,
                                "LastName":         self.textFieldsCollection.first(where: { $0.tag == 2 })!.text!,
                                "MobilePhone":      self.textFieldsCollection.first(where: { $0.tag == 0 })!.text!,
                                "Email":            self.textFieldsCollection.first(where: { $0.tag == 4 })!.text!,
                                "CityId":           PersonalData.current!.cityId,
                                "AddressLine1":     self.textFieldsCollection.first(where: { $0.tag == 3 })!.text!,
                                "AddressLine2":     "",
                                "PostCode":         "",
                                "CardNumber":       self.textFieldsCollection.first(where: { $0.tag == 5 })!.text!,
                                "CardCVV":          self.textFieldsCollection.first(where: { $0.tag == 6 })!.text!,
                                "CardExpired":      self.textFieldsCollection.first(where: { $0.tag == 8})!.text! +
                                                    self.textFieldsCollection.first(where: { $0.tag == 7})!.text!,
                                "Adv":              "1",
                                "Token":            Token.current!.firebase ?? ""
                            ])
                        
                        self.interactor?.updatePersonalData(withRequestModel: requestModel)
                    })
                }
            })
        }
    }
    
    
    // MARK: - Gesture
    @IBAction func handlerTapGestureRecognizer(_ sender: Any) {
        self.view.endEditing(true)
    }
    
    
    // MARK: - Actions
    @IBAction func handlerSaveButtonTapped(_ sender: UIButton) {
        self.startDataValidation()
    }
    
    @objc func adjustForKeyboard(notification: Notification) {
        let userInfo = notification.userInfo!
        
        let keyboardScreenEndFrame  =   (userInfo[UIKeyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
        let keyboardViewEndFrame    =   view.convert(keyboardScreenEndFrame, from: view.window)
        
        // Keyboard hide
        if notification.name == Notification.Name.UIKeyboardWillHide {
            self.scrollView.contentInset = UIEdgeInsets.zero
            //(top: smallDevices.contains(UIDevice.current.deviceType) ? 64 : 0, left: 0, bottom: 0, right: 0)
        }
         
        // Keyboard show
        else {
            self.scrollView.contentInset    =   UIEdgeInsets(top: 0,left: 0, bottom: keyboardViewEndFrame.height, right: 0)
            var activeViewRect              =   self.view.frame
            activeViewRect.size.height     -=  keyboardViewEndFrame.height
            
            if (!activeViewRect.contains(self.firstResponder.frame.origin)) {
                self.scrollView.scrollRectToVisible(self.firstResponder.frame, animated: true)
            }
        }
    }
}


// MARK: - PersonalDataShowDisplayLogic
extension PersonalDataShowViewController: PersonalDataShowDisplayLogic {
    func displayTerms(fromViewModel viewModel: PersonalDataShowModels.Client.ViewModel) {
        // NOTE: Display the result from the Presenter
    }
    
    func displayUpdatePersonalData(fromViewModel viewModel: PersonalDataShowModels.Client.ViewModel) {
        // NOTE: Display the result from the Presenter
        guard viewModel.error == nil else {
            Logger.log(message: "API 'Update Personal Data' failed", event: .Info)
            self.showAlertView(withTitle: "Error", andMessage: viewModel.error!.localizedDescription, needCancel: false, completion: {_ in})
            return
        }
        
        self.showAlertView(withTitle: "Info", andMessage: "Your Personal Data updated", needCancel: false, completion: { _ in
            if self.routeFrom == .FromSideMenu {
                Logger.log(message: "Route to MainShow scene", event: .Info)
                self.navigationController?.popViewController(animated: true)
            }
                
            else {
                Logger.log(message: "Route to OrderShow scene", event: .Info)
                self.performSegue(withIdentifier: "OrderShowSegue", sender: nil)
            }
        })
    }
}


// MARK: - UITextFieldDelegate
extension PersonalDataShowViewController: UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        self.firstResponder = textField
    }
    
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        // Years
        if textField.tag == 7 {
            textField.showToolBar(withPickerViewDataSource: self.router!.dataStore!.years, andSelectedItem: self.router!.dataStore!.selectedYearRow, { [unowned self] row in
                if let selectedRow = row as? Int {
                    self.interactor?.saveSelectedYear(byRow: selectedRow)
                    textField.text = self.router!.dataStore!.years[selectedRow].title
                }
                
                textField.resignFirstResponder()
            })
        }
            
        // Months
        else if textField.tag == 8 {
            textField.showToolBar(withPickerViewDataSource: self.router!.dataStore!.months, andSelectedItem: self.router!.dataStore!.selectedMonthRow, { [unowned self] row in
                if let selectedRow = row as? Int {
                    self.interactor?.saveSelectedMonth(byRow: selectedRow)
                    textField.text = self.router!.dataStore!.months[selectedRow].title
                }
                
                textField.resignFirstResponder()
            })
        }
        
        return true
    }
    
    // Clear button tap
    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        return true
    }
    
    // Hide keyboard
    func textFieldDidEndEditing(_ textField: UITextField) {
        self.firstResponder = nil
    }
    
    func textFieldShouldEndEditing(_ textField: UITextField) -> Bool {
        if textField.tag == 4 {
            if let email = textField.text, !email.isEmpty {
                guard ADEmailAndPassword.validateEmail(emailId: email) else {
                    self.showAlertView(withTitle: "Error", andMessage: "Please, enter correct email...", needCancel: false, completion: { _ in })
                    return false
                }
                
                return true
            }
        }
        
        return true
    }
    
    // TextField editing
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        switch textField.tag {
        // Phone Number & Credit Card Number
        case 0, 5:
            guard !string.isEmpty else { return true }
            return (textField.text!.count + string.count) < (textField.tag == 0 ? 11 : 21) && CharacterSet.decimalDigits.contains(Unicode.Scalar(string)!)
        
        // First & Last Names
        case 1, 2:
            return (textField.text!.count + string.count) < 21
        
        // Address & Email
        case 3, 4:
            return (textField.text!.count + string.count) < 51
            
        // Credit Card CVV
        case 6:
            textField.textAlignment = .center
            guard !string.isEmpty else { return true }
            return (textField.text!.count + string.count) < 4 && CharacterSet.decimalDigits.contains(Unicode.Scalar(string)!)
            
        default:
            return true
        }
    }
    
    // Return button tap
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField.tag == 6 {
            textField.resignFirstResponder()
        }
        
        else {
            textFieldsCollection.first(where: { $0.tag == textField.tag + 1 })?.becomeFirstResponder()
        }
        
        return true
    }
}
