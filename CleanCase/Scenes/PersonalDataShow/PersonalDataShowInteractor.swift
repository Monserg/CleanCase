//
//  PersonalDataShowInteractor.swift
//  CleanCase
//
//  Created by msm72 on 02.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol PersonalDataShowBusinessLogic {
    func saveOrderID(_ orderID: Int16)
    func saveSelectedYear(byRow row: Int)
    func saveSelectedMonth(byRow row: Int)
    func fetchTerms(withRequestModel requestModel: PersonalDataShowModels.Client.RequestModel)
    func updatePersonalData(withRequestModel requestModel: PersonalDataShowModels.Client.RequestModel)
}

protocol PersonalDataShowDataStore {
    var orderID: Int16! { get set }
    var selectedYearRow: Int { get set }
    var selectedMonthRow: Int { get set }
    var years: [PickerViewSupport]! { get set }
    var months: [PickerViewSupport]! { get set }
    var textFieldsTexts: [ (placeholder: String, errorText: String) ] { get set }
}

class PersonalDataShowInteractor: ShareInteractor, PersonalDataShowBusinessLogic, PersonalDataShowDataStore {
    // MARK: - Properties
    var presenter: PersonalDataShowPresentationLogic?
    
    // PersonalDataShowDataStore protocol implementation
    var orderID: Int16! = 0
    var selectedYearRow: Int = 0
    var selectedMonthRow: Int = 0

    var years: [PickerViewSupport]! = [PickerViewSupport]()
    var months: [PickerViewSupport]! = [PickerViewSupport]()
    
    var textFieldsTexts: [ (placeholder: String, errorText: String) ] = [
        (placeholder: "Enter Phone Number".localized(), errorText: "Please, enter phone number...".localized()),
        (placeholder: "Enter First Name".localized(), errorText: "Please, enter first name...".localized()),
        (placeholder: "Enter Last Name".localized(), errorText: "Please, enter last name...".localized()),
        (placeholder: "Enter Address".localized(), errorText: "Please, enter address...".localized()),
        (placeholder: "Enter Email".localized(), errorText: "Please, enter email...".localized()),
        (placeholder: "Enter Credit Card Number".localized(), errorText: "Please, enter credit card number...".localized()),
        (placeholder: "Enter Credit Card CVV".localized(), errorText: "Please, enter credit card CVV...".localized()),
        (placeholder: "Enter Credit Card Year".localized(), errorText: "Please, enter credit card year...".localized()),
        (placeholder: "Enter Credit Card Month".localized(), errorText: "Please, enter credit card month...".localized())
    ]

    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .Severe)
    }
    

    // MARK: - Business logic implementation
    func saveOrderID(_ orderID: Int16) {
        self.orderID = orderID
    }
    
    func saveSelectedYear(byRow row: Int) {
        self.selectedYearRow = row
    }
    
    func saveSelectedMonth(byRow row: Int) {
        self.selectedMonthRow = row
    }
    
    func fetchTerms(withRequestModel requestModel: PersonalDataShowModels.Client.RequestModel) {
        // Prepare PickerView data
        for i in 1...12 {
            let currentYear = Date.getYear(fromDate: Date()) - 1 + i
            self.months.append(PersonalDataShowModels.Client.RequestModel.ItemForPickerView(id: Int16(i), title: "\(i)".addZero()))
            self.years.append(PersonalDataShowModels.Client.RequestModel.ItemForPickerView(id: Int16(currentYear), title: "\(currentYear)"))
        }
        
        let responseModel = PersonalDataShowModels.Client.ResponseModel(error: nil)
        self.presenter?.presentTerms(fromResponseModel: responseModel)
    }
    
    func updatePersonalData(withRequestModel requestModel: PersonalDataShowModels.Client.RequestModel) {
        // API: Fetch request data
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .addClient([ "client": requestModel.params! ], true), andResponseType: ResponseAPIClientResult.self, completionHandler: { [unowned self] responseAPI in
            if (responseAPI.model as? ResponseAPIClientResult) != nil {
                if let personalData = self.appDependency.coreDataManager.createEntity("PersonalData") as? PersonalData {
                    personalData.updateEntity(fromJSON: requestModel.params!)
                    Logger.log(message: "CoreData 'Update Personal Data' success: personalData json = \(requestModel.params!)", event: .Verbose)
                }
            }
            
            let responseModel = PersonalDataShowModels.Client.ResponseModel(error: responseAPI.error)
            self.presenter?.presentUpdatePersonalData(fromResponseModel: responseModel)
        })
    }
}
