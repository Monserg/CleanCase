//
//  PersonalDataShowInteractor.swift
//  CleanCase
//
//  Created by msm72 on 02.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol PersonalDataShowBusinessLogic {
    func updatePersonalData(withRequestModel requestModel: PersonalDataShowModels.Client.RequestModel)
}

protocol PersonalDataShowDataStore {
    var textFieldsTexts: [ (placeholder: String, errorText: String) ] { get set }
}

class PersonalDataShowInteractor: ShareInteractor, PersonalDataShowBusinessLogic, PersonalDataShowDataStore {
    // MARK: - Properties
    var presenter: PersonalDataShowPresentationLogic?
    
    // PersonalDataShowDataStore protocol implementation
    var textFieldsTexts: [ (placeholder: String, errorText: String) ] = [
        (placeholder: "Enter Phone Number".localized(), errorText: "Please, enter phone number...".localized()),
        (placeholder: "Enter First Name".localized(), errorText: "Please, enter first name...".localized()),
        (placeholder: "Enter Last Name".localized(), errorText: "Please, enter last name...".localized()),
        (placeholder: "Enter Address".localized(), errorText: "Please, enter address...".localized()),
        (placeholder: "Enter Email".localized(), errorText: "Please, enter email...".localized()),
        (placeholder: "Enter Credit Card Number".localized(), errorText: "Please, enter credit card number...".localized()),
        (placeholder: "Enter Credit Card CVV".localized(), errorText: "Please, enter credit card CVV...".localized()),
        (placeholder: "Enter Credit Card Year".localized(), errorText: "Please, enter credit card year...".localized()),
        (placeholder: "Enter Credit Card Month".localized(), errorText: "Please, enter credit card month...".localized())
    ]

    
    // MARK: - Business logic implementation
    func updatePersonalData(withRequestModel requestModel: PersonalDataShowModels.Client.RequestModel) {
        // API: Fetch request data
        self.appDependency.restAPIManager.fetchRequest(withRequestType: .addClient([ "client": requestModel.params ], true), andResponseType: ResponseAPIClientResult.self, completionHandler: { [unowned self] responseAPI in
            if (responseAPI.model as? ResponseAPIClientResult) != nil {
                PersonalData().updateEntity(fromJSON: requestModel.params)
            }
            
            let responseModel = PersonalDataShowModels.Client.ResponseModel(error: responseAPI.error)
            self.presenter?.presentUpdatePersonalData(fromResponseModel: responseModel)
        })
    }
}
