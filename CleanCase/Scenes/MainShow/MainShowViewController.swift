//
//  MainShowViewController.swift
//  CleanCase
//
//  Created by msm72 on 02.02.2018.
//  Copyright (c) 2018 msm72. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SideMenu

// MARK: - Input & Output protocols
protocol MainShowDisplayLogic: class {
    func displaySomething(fromViewModel viewModel: MainShowModels.Something.ViewModel)
}

class MainShowViewController: UIViewController {
    // MARK: - Properties
    var interactor: MainShowBusinessLogic?
    var router: (NSObjectProtocol & MainShowRoutingLogic & MainShowDataPassing)?
    
    fileprivate var sideMenuManager: SideMenuManager!

    
    // MARK: - IBOutlets
    @IBOutlet weak var createOrderButton: UIButton!
    @IBOutlet weak var myOrderButton: UIButton!
    
    @IBOutlet weak var laundryButton: UIButton! {
        didSet {
            laundryButton.setTitle("ZORRO", for: .normal)
        }
    }

    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   MainShowInteractor()
        let presenter               =   MainShowPresenter()
        let router                  =   MainShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.viewSettingsDidLoad()
        self.setupSideMenu()
    }
        
    
    // MARK: - Custom Functions
    fileprivate func viewSettingsDidLoad() {
        let requestModel = MainShowModels.Something.RequestModel()
        interactor?.doSomething(withRequestModel: requestModel)
    }
    
    fileprivate     func setupSideMenu() {
        sideMenuManager = SideMenuManager.default
        let leftSideMenuNC      =   storyboard!.instantiateViewController(withIdentifier: "LeftSideMenuNC") as! UISideMenuNavigationController
        
        sideMenuManager.menuLeftNavigationController    =   leftSideMenuNC
        
        sideMenuManager.menuAddPanGestureToPresent(toView: self.navigationController!.navigationBar)
        sideMenuManager.menuAddScreenEdgePanGesturesToPresent(toView: self.navigationController!.view)
        
        sideMenuManager.menuWidth           =   270 * widthRatio
        sideMenuManager.menuDismissOnPush   =   true
        sideMenuManager.menuPresentMode     =   .menuSlideIn
        
        let leftSideMenuShowVC  =   leftSideMenuNC.viewControllers.first as! LeftSideMenuShowViewController
        
        sideMenuManager.menuLeftNavigationController = leftSideMenuNC
        
        // Handler left side menu item select
        /*
        leftSideMenuShowVC.handlerMenuItemSelectCompletion = { [unowned self] (scene) in
            if let nextScene = scene as? SceneNameTuple, nextScene.identifier == "SelectCity"  {
                // API: Load Cities list
                self.checkNetworkConnection { [unowned self] _ in
                    leftSideMenuNC.dismiss(animated: true, completion: {})
                    let requestModel = EstablishmentsShowModels.Cities.RequestModel()
                    self.interactor?.fetchCities(withRequestModel: requestModel)
                }
            } else if let nextScene = scene as? SceneNameTuple, nextScene.identifier != "LogOut"  {
                let storyboard = UIStoryboard(name: nextScene.storyboard, bundle: nil)
                let destinationVC = storyboard.instantiateViewController(withIdentifier: nextScene.identifier)
                
                DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + dispatchTimeDelay * 3) {
                    leftSideMenuNC.dismiss(animated: true, completion: {})
                    
                    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + dispatchTimeDelay * 7) {
                        self.show(destinationVC, sender: nil)
                    }
                }
            } else {
                DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + dispatchTimeDelay * 3) {
                    leftSideMenuNC.dismiss(animated: true, completion: {})
                    
                    // Modify user in CoreData
                    User.current?.update("isLogin", withValue: false)
                    
                    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + dispatchTimeDelay * 7) {
                        self.view.window!.rootViewController?.dismiss(animated: true, completion: nil)
                    }
                }
            }
        }
 */
    }

    
    // MARK: - Actions
    @IBAction func handlerSideMenuBarButtonTap(_ sender: UIBarButtonItem) {
        // Show side menu
        present(sideMenuManager.menuLeftNavigationController!, animated: true, completion: nil)
    }

    @IBAction func handlerCreateOrderButtonTap(_ sender: Any) {
        print("Create Order button tapped...")
    }
    
    @IBAction func handlerMyOrderButtonTap(_ sender: Any) {
        print("My Order button tapped...")
    }
}


// MARK: - MainShowDisplayLogic
extension MainShowViewController: MainShowDisplayLogic {
    func displaySomething(fromViewModel viewModel: MainShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter

    }
}


// MARK: - UISideMenuNavigationControllerDelegate
extension MainShowViewController: UISideMenuNavigationControllerDelegate {
    func sideMenuWillAppear(menu: UISideMenuNavigationController, animated: Bool) {
        print("SideMenu Appearing! (animated: \(animated))")
    }
    
    func sideMenuDidAppear(menu: UISideMenuNavigationController, animated: Bool) {
        print("SideMenu Appeared! (animated: \(animated))")
    }
    
    func sideMenuWillDisappear(menu: UISideMenuNavigationController, animated: Bool) {
        print("SideMenu Disappearing! (animated: \(animated))")
    }
    
    func sideMenuDidDisappear(menu: UISideMenuNavigationController, animated: Bool) {
        print("SideMenu Disappeared! (animated: \(animated))")
    }
}
